import { NextResponse } from 'next/server';
import Database from '../../../database/db.js';

export async function GET(request) {
    try {
        const { searchParams } = new URL(request.url);
        const tierlistId = searchParams.get('tierlist_id');

        console.log('üîó R√©cup√©ration des assignments...', tierlistId ? `pour tierlist ${tierlistId}` : 'tous');
        const db = Database.getInstance();

        let assignments;
        if (tierlistId) {
            const result = await db.getTierAssignmentsFromTiers(tierlistId);
            assignments = Object.entries(result.assignments).map(([item_id, tier_id]) => ({ item_id, tier_id }));
        } else {
            // Pour tous les tierlists, on devrait refactorer mais pour l'instant...
            throw new Error('R√©cup√©ration globale non support√©e dans la version simplifi√©e');
        }

        console.log(`‚úÖ ${assignments.length} assignments r√©cup√©r√©s de la BDD`);

        return NextResponse.json({
            success: true,
            assignments: assignments
        });
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des assignments:', error);
        return NextResponse.json(
            { success: false, error: error.message },
            { status: 500 }
        );
    }
}

export async function POST(request) {
    try {
        const body = await request.json();
        const { item_id, tier_id, old_tier_id, position = -1 } = body;

        console.log('üîó D√©placement item:', { item_id, old_tier_id, tier_id, position });
        const db = Database.getInstance();

        // Utiliser la nouvelle m√©thode simplifi√©e avec position
        const success = await db.moveItemToTier(item_id, old_tier_id, tier_id, position);

        if (success) {
            console.log('‚úÖ Item d√©plac√© avec succ√®s');
            return NextResponse.json({
                success: true,
                message: 'Item d√©plac√© avec succ√®s'
            });
        } else {
            throw new Error('√âchec du d√©placement');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©placement de l\'item:', error);
        return NextResponse.json(
            { success: false, error: error.message },
            { status: 500 }
        );
    }
}
